CPU 

1. CPU: 입력장치로부터 자료를 받아 연산하고 그 결과를 출력장치로 보내는 일련의 과정을 제어 및조정하는 핵심장치로 보내는 일련의 과정을 제어 및 조정하는 핵심장치

2. CPU의 구성요소
   1) ALU(연상장치)
      각종 산술연산들과 논리연산들을 수행하는 회로
      산술연산: +,-,*,/
      논리연산: AND, OR, NOT, XOR

   2) Register(레지스터)
      CPU 내부의 소규모 데이터나 중간 결과를 일시적을 기억해 두는 고소그이 전용 영역
      컴퓨터 기억장치 중 Access 속도가 가장 빠름

   3) Control Unit(제어장치)
      프로그램 코드를 해석하고, 그것을 실행하기 위한 제어 신호들을 발생시킴

   4) 내부 CPU 버스 
      ALU와 레지스터 간의 데이터 이동을 위한 경로

4. 내부 레지스터의 종류
   1) PC(Program Counter)
      다음에 수행할 명령어가 저장된 주기억장치의 번지를 지정

   2) MAR(Memory Address Register)
      주기억장치에 접근하기 위한 주기억장치의 번저를 기억

   3) MBR(Memory Buffer Register)
      주기억장치에 입/출력할 자료를 기억하는 레지스터

   4) IR(Instruction Register)
      주기억장치에서 인출한 명령코드를 기억하는 레지스터

버스 시스템(Bus System)

1. 버스: 시스템에 많은 장치를 공유하여 데이터, 주소, 제어 정보를 전달하는 전송 라인

2. 버스 종류
   1) 데이터 버스
      시스템 컴포넌트 간 처리 데이터를 전송하기 위한 용도

   2) 주소 버스
      기억장소의 위치 또는 장치 식별을 지정하기 위한 라인
      라인의 비트 수에 따라 접속될 수 있는 장치의 용량이 결정됨

   3) 제어 버스
      CPU와 기억장치 또는 I/O 장치 사이의 제어 신호를 전송하는 라인

CPU의 명령 실행 주기(Instruction Cycle)

1. CPU의 명령어 처리: 하나의 명령어 실행이 끝난 후, 다음 명령어의 수행이 시작되어 끝날때까지 걸리는 시간

2. Instruction Cycle
   1) 인출(Instruction Fetch)
      인출단계는 메모리에서 데이터를 로드하여 CPU에 있는 레지스터에 적재하는 과정

   2) 간접(Indirect)
      메모리를 참조할 때 간접주소 방식을 사용하는 경우에 실행
      간접주소란 CPU가 메모리를 참조했을 때 데이터가 존재하는 것이 아니라 메모리에 주소가 존재하여 메모리내에서 한 번 더 조회해서 데이터를 얻는 것

   3) 실행(Execution)
      명령과 데이터로 CPU가 산술 및 논리연산을 수행하는 것

   4) 인터럽트(Interrupt)
      컴퓨터 작동 중 예기치 않은 문제가 발생한 경우라도 업무 처리가 계속될 수 있도록 하는 컴퓨터 운영체제의 한 기능으로, 크게 하드웨어 인터럽트와 소트프웨어 인터럽트로 나뉨
      하드웨어 인터럽트- 기계착오 인터럽트, 외부 인터럽트, 입출력 인터럽트, 프로그램 검사 인터럽트
      소프트웨어 인터럽트 - CPU 내부에서 자신이 실행한 명령이나 CPU의 명령 실행에 관련된 모듈이 변화하는 경우 발생 
                           ex) SVC

메모리 시스템

1. 기억장치 계층구조
  1) 메모리 계층구조의 이유
     액세스 속도가 높아질수록 비트당 가격도 높아짐
     용량이 커질수록 비트당 가격이 낮아짐
     용량이 커질수록 액세스 속도가 낮아짐

   2) 기억장치 계층구조
      보조기억장치 -> 주기억장치 -> 캐시 -> 레지스터

2. 캐시 메모리
   1) 캐시 메모리: CPU와 주기억장치의 속도 차이를 극복하기 위해 CPU와 주기억장치 사이에 존재하는 고속의 버퍼 메모리 

   2) 캐시 메모리 사상 방식
      i 직접사상
         Main Memoery를 여러 구역으로 분할하여 Cache 슬록과 매핑
         장점: 매핑 절차가 단순하고 신속하게 처리
         단점: 높은 캐시 미스율

      ii 연관사상
         Main Memory의 각 블록이 Cache의 어느 슬록이든 적재 가능
         장점: 지역성 높은 접근 시 캐시 적중률 높음
         단점: 구현 하드웨어가 복잡하여 구현 비용 상승

      iii 집합 연관사상
          직접사상/연관사상 절충 방식으로 캐시와 메모리가 M 대 1로 대응
          장점: 직접사상과 연관사상의 장점 수용
          단점: 캐시 Fin/Fout 발생 증가, 구현 비용이 많이 듬

  3. 캐시 메모리 관리 방식
     1) 캐시 메모리 인출 방식
        Demand Fetch: 필요 시 캐시를 인출하는 방식
        Pre-Fetch: 예상되는 블록을 미리 패치 해 두는 방식

     2) 캐시 메모리 교체 알고리즘의 종류
        - Random
          교체될 Page를 임의 선정
          Overhead가 적음

        - FIFO
          캐시 내에 오래 있었던 Page 교체
          자주 사용되는 Page가 교체될 우려

        - LFU
          사용 횟수가 가장 적은 Page 교체
          최근 적재된 Page가 교체될 우려

        - LRU
          가장 오랫동안 사용되지 않는 Page 교체
          Time stamping에 의한 overhead 존재

        - Optimal 
          향후 가장 참조되지 않을 Page 교체
          실현 불가능

        - NUR
          참조 비트와 수정 비트로 미사용 Page 교체
          최근 사용되지 않은 페이지 교체

        - SCR
          최초 참조 비트 1로 셋, 1인 경우 0으로 셋, 0인 경우 교체
          기회를 한 번 더 줌

    3) 페이지 교체 관리 시 문제점
       i Page Fault 발생 
         기억장치에 적재되지 않은 Page를 사용하려 할 때 Page Fault 발생

       ii Demand Paging
          요구될 때에만 Process가 Page를 적재하는 방식

       iii Threashing 발생
           Pagㄷ 부재가 너무 빈번하게 발생하여 CPU가 Process 수행보다 Page 교체에 더 많은 시간을 소요하는 비정상적인 현상

캐시 메모리 일관성

1. 캐시 메모리 일관성 유지 방식
   멀티프로세서 환경에서 각 프로세서가 캐시를 보유하며 캐시에 로드된 데이터를 변경한 경우 쥬거억 장치의 데이터와 동일하게 유지되는 메커니즘

2. 캐시 불일치 발생 원인
   - Write-through 정책이 사용되는 경우 프로세서 P1이 X 값을 110으로 갱신하면 주기억장치의 값이 110으로 갱신되나 P2, P3 캐시는 100으로 일관성이 깨짐
   - Write-back 정책이 사용되는 경우 Store가 일어나기 전까지 2개의 캐시, 주기억장치가 비 일관성 초래

가상 메모리 시스템

1. 가상 메모리
   1) 가상 메모리의 개념
      - 물리적 메모리 크기의 하계를 극복하기 위해 실제 물리적 메모리보다 더 큰 용량의 메모리 공간을 제공하는 메모리 관리 기법

   2) 가상 메모리 관리 단위
      - 페이지: 동일한 크기의 최소 논리 분할 단위로 나눈 것
      - 세그먼트: 사용자 주소 공간을 용도별로 논리적 단위로 나눈 것

   3) 가상 메모리 관리 정책
      i 할당 기법
         - 프로세스에게 할당되는 메모리 블록의 단위를 결정 
            ex) 고정 할당, 가변 할당, Paging, Segmentation

      ii 호출 기법
         - 보조기억장치에서 주기억장치로 적재할 시점 결정
            ex) Demand Fetch, Pre Fetch

      iii 배치 기법 
         - 주기억장치 공간 부족 시 교체 대상 결정
            ex) Random, FlFo, LRU, LFU, NUR, SCR

   4) 할당 정책
      i 연속 할당
         - 고정 분할: 고정된 크기의 단위로 메모리 할당, 내부 단편화 발생
         - 가변 분할: 할당 단위를 요청마다 다른 크기로 할당, 외부 단편화 발생
      ii 비연속 할당 
         - Paging: 가상 메모리 블록을 페이지 단위 관리, TLB, MMU, Page table로 관리
         - Segmentation: 가변 크기인 세그먼트로 분ㄴ할, Segment Table로 관리

가상 메모리 관리 기법

1. Paging 메모리 관리 기법
   - 논리 주소의 고정된 페이지라고 불리는 블록들로 분할 관리
   - 각각 페이지는 물리 메모리의 프레인과 맵핑

2. Segmentation 메모리 관리 기법
   - 메모리를 세그먼트 세트로 나눠 관리하는 방식
   - 주소 지정은 세그먼트의 베이스 어드레스를 지시하는 Segment Selector와 세그먼트 내의 변위 값을 통해 지정

3. Paged Segmentation 기법
   - 페이지들로 세그먼트를 구성하고 세그먼트 표 참조 후 페이지 표를 참조
   - 논리주소는 세그먼트 번호, 페이지 번호, 오프셋으로 구성

I/O 인터페이스

1. 입출력 방법: CPU 경유 유무에 따라 아래와 같이 분류
   1) CPU 경우: 프로그램에 의한 I/O, 인터럽트에 의한 I/O
   2) CPU 비경유: DMA Channel I/O

2. 프로그램에 의한 I/O와 인터럽트에 의한 I/O
   1) 프로그램에 의한 I/O 
      - 컴퓨터 메모리에 기록된 입출력 명령에 의해 수행
      - CPU가 주변장치를 연속 감시하는 polling 방식
      - 프로세서의 시간을 낭비하고 처리 효율이 낮음

   2) 인터럽트에 의한 I/O
      - CPU가 주변 장치들의 데이터 전송을 위한 인터럽트 요청을 잠지하면 수행 중이던 작업을 중단하고 데이터 전송을 처리하기 위해 서브루틴으로 분기하여 전송을 수행

DMA
1. DMA의 정의
   CPU의 개입 없이 I/O장치와 기억장치 사이의 데이터를 전송하는 접근 방식

2. DMA 동작 방식의 종류
   1) Cycle Stealing 
      DMA 제어기와 CPU가 버스를 공유
      CPU가 버스를 사용하지 않는 사이클에만 접근하고 CPU보다 높은 우선순위를 가짐

   2) Burst Mode
      DMA 제어기가 버스를 점유
      동작 완료 후 버스 해제

I/O Processor

1. I/O Processor
   - 채널에 의한 입출력은 Selector 채널, Multiplexer 채널
   - I/O 장치의 다양함과 복잡한 때문에 DMA 제어기로는 한계가 있어 별도 전용 처리 기능의 프로세서를 탑재하여 I/O 작업을 처리
   - CPU나 DMA 대신 독립된 입출력 프로세서인 채널이 입출력을 담당

2. 구성요소
   - 프로세서: I/O 명령어들을 실행할 수 있는 프로세서
   - 지역 기억장치: 대용량 데이터 블록들을 저장할 수 있는 저장소
   - 버스 인터페이스: 시스템 버스에 대한 인터페이스
   - 버스 중재회로: 버스 마스터 및 버스 중재기

3. 종류
   1) Multiplexer Channel 
      - 저속장치 연결
      - 시분할 방식으로 Byte 단위 전송

   2) Selector Channel
      - 고속장치, 단일 입출력만 가능
      - Burst Mode 동작

   3) Block Multiplexer Channel 
      - Hybrid모드, 동시에 여러 I/O처리, 블록 단위

   4) Byte Multiplexer Channel
      - 한 개의 채널에 여러 개의 입출력 장치를 연결하여 시분할 공유하는 방식, 저속 입출력 방식
